{
  "regex-test-digits": {
    "prefix": "node-regex-test-digits",
    "body": [
      "const isMatch = /\\d+/.test('abc123')"
    ],
    "description" : "test if string contains digits, returns true/false"
  },
  "regex-test-word": {
    "prefix": "node-regex-test-word",
    "body": [
      "const isMatch = /\\w+/.test('abc123')"
    ],
    "description": "test if string contains a word boundary, returns true/false"
  },
  "regex-test-match": {
    "prefix": "node-regex-match",
    "body": [
      "const [, extension] = 'file.txt'.match(/\\.(\\w+)/)"
    ],
    "description": "matches a file extension"
  },
  "regex-test-match-named-group": {
    "prefix": "node-regex-match-named-group",
    "body": [
      "const { groups: { extension } } = 'file.txt'.match(/\\.(?<extension>\\w+)/)"
    ],
    "description": "matches a file extension, "
  },
  "express server": {
    "prefix": "node-express",
    "body": [
      "const express = require('express')",
      "const app = express()",
      "const port = 3000",
      "",
      "app.get('/', (req, res) => res.send('Hello World!'))",
      "app.listen(port, () => console.log(`Example app listening on port ${port}!`))"
    ],
    "description": "Creates an express server"
  },
  "express GET": {
    "prefix": "node-express-get",
    "body": [
      "app.get('/', (req, res) => {",
      "  res.send('GET request to the homepage')",
      "})"
    ],
    "description": "Creates a GET route"
  },
  "express GET params": {
    "prefix": "node-express-get-params",
    "body": [
      "app.get('/books/:bookId', (req, res) => {",
      "  res.send(req.params.bookId)",
      "})"
    ],
    "description": "Creates a GET route and shows how to access params"
  },
  "express POST": {
    "prefix": "node-express-post",
    "body": [
      "app.post('/', function (req, res) {",
      "  res.send('POST request to the homepage')",
      "})"
    ],
    "description": "Creates a POST route"
  },
  "express POST params": {
    "prefix": "node-express-post-params",
    "body": [
      "var bodyParser = require('body-parser');",
      "app.use(bodyParser.json());",
      "",
      "app.post('/update', function(req, res) {",
      "  const { name, description } = req.body;",
      "  res.send(`Name ${name}, desc ${description}`);",
      "});"
    ],
    "description": "Creates a POST route that can read from the body"
  },
  "express PUT params": {
    "prefix": "node-express-put-params",
    "body": [
      "var bodyParser = require('body-parser');",
      "app.use(bodyParser.json());",
      "",
      "app.put('/products', function(req, res) {",
      "  const { id, name, description } = req.body;",
      "  res.send(`Name ${id} ${name}, desc ${description}`);",
      "});"
    ],
    "description": "Creates a POST route that can read from the body"
  },
  "express DELETE params": {
    "prefix": "node-express-delete-params",
    "body": [
      "var bodyParser = require('body-parser');",
      "app.use(bodyParser.json());",
      "",
      "app.delete('/products/:id', function(req, res) {",
      "  const { id } = req.params;",
      "  res.send(`Delete record with id ${id}`);",
      "});"
    ],
    "description": "Creates a POST route that can read from the body"
  },
  "express QUERY params": {
    "prefix": "node-express-query-params",
    "body": [
      "var bodyParser = require('body-parser');",
      "app.use(bodyParser.json());",
      "",
      "// for routes looking like this `/products?page=1&pageSize=50`",
      "app.get('/products', function(req, res) {",
      "  const page = req.query.page;",
      "  const pageSize = req.query.pageSize;",
      "  res.send(`Filter with parameters ${page} and ${pageSize});`",
      "});"
    ],
    "description": "Creates a POST route that can read from the body"
  },
  "express POST params version >=4.16": {
    "prefix": "node-express-post-params-alt",
    "body": [
      "app.use(express.json())",
      "app.listen(8080)",
      "",
      "app.post('/test', (req, res) => {",
      "  res.json({ body: req.body })",
      "});"
    ],
    "description": "Creates a POST route that can read from the body, works for 4.16 version of express and above"
  },
  "express middleware": {
    "prefix": "node-express-middleware-logger",
    "body": [
      "const logger = function (req, res, next) {",
      "  console.log('logging')",
      "  next()",
      "}",
      "",
      "app.use(logger)",
      "",
      "app.get('/', (req, res) => {",
      "  res.send('Hello World!')",
      "})"
    ],
    "description": "Creates a middleware"
  },
  "express middleware error": {
    "prefix": "node-express-middleware-error",
    "body": [
      "app.use(function (err, req, res, next) {",
      "  console.error(err.stack)",
      "  res.status(500).send('Something broke!')",
      "});"
    ],
    "description": "Creates a error middleware"
  },
  "http server": {
    "prefix": "node-http-server",
    "body": [
      "var http = require('http');",
      "http.createServer(function (request, response) {",
      "  response.writeHead(200, {'Content-Type': 'text/plain'});",
      "  response.end('Hello World');",
      "}).listen(8081);",
      "",
      "console.log('Server running at http://127.0.0.1:8081/');"
    ],
    "description": "Creates a simple HTTP server"
  },
  "file read sync": {
    "prefix": "node-file-read-sync",
    "body": [
      "var fs = require('fs');",
      "var data = fs.readFileSync('file.txt');"
    ],
    "description": "Reads a file synchronously"
  },
  "file read async": {
    "prefix": "node-file-read-async",
    "body": [
      "var fs = require('fs');",
      "fs.readFile('input.txt', function (err, data) {",
      "  if (err) return console.error(err);",
      "  console.log(data.toString());",
      "});"
    ],
    "description": "Reads a file asynchronously"
  },
  "event emitter": {
    "prefix": "node-event-emitter",
    "body": [
      "var events = require('events');",
      "var eventEmitter = new events.EventEmitter();",
      "eventEmitter.emit('my_event');",
      "eventEmitter.on('my_event', () => {",
      "  console.log('data received successfully.');",
      "});"
    ],
    "description": "Event emitter, shows emitting event and subscribing to it"
  },
  "Promise creation": {
    "prefix": "node-promise-create",
    "body": [
      "new Promise((resolve, reject) => {",
      "  let condition = false;",
      "  if(condition) {",
      "    resolve('data')",
      "  } else {",
      "    reject('error')",
      "}",
      "})"
    ],
    "description": "creates a Promise by instantiating it"
  },
  "Promise shorthand": {
    "prefix": "node-promise-shorthand",
    "body": [
      "const promiseThatWillResolve = Promise.resolve('data');",
      "const promiseThatWillReject = Promise.reject('error');"
    ],
    "description": "uses the static resolve/reject, good for unit tests"
  },
  "Promise all": {
    "prefix": "node-promise-all",
    "body": [
      "const getData = () => Promise.resolve('data');",
      "const getMoreData = () => Promise.resolve('more data');",
      "",
      "Promise.all(",
      "  getData(),",
      "  getMoreData()",
      ").then(result => {",
      "  const [data, moreData] = result;",
      "})"
    ],
    "description": "uses the static all(), allows us to have a list of Promises finish at the same time"
  },
  "Async/await": {
    "prefix": "node-async-await",
    "body": [
      "async function getData() {",
      "  return Promise.resolve('data');",
      "}",
      "",
      "async function getMoreData(data) {",
      "  return Promise.resolve(data + 'more data');",
      "}",
      "",
      "function getAll() {",
      "  const data = await getData();",
      "  const moreData = await getMoreData(data);",
      "  return `All the data: ${data}, ${moreData}`;",
      "}",
      "",
      "getAll().then((all) => {",
      "  console.log('all the data')",
      "})"
    ],
    "description": "demonstrates async/await"
  },
  "Joi schema validation": {
    "prefix": "node-express-schema-validation",
    "body": [
      "const Joi = require('joi');",
      "const loginSchema = Joi.object().keys({",
      "  username: Joi.string()",
      "    .min(3),",
      "    .max(10),",
      "    .required(),",
      "  password: Joi.string().regex(/^[a-zA-Z0-9]{3,30}$/)",
      "});",
      "",
      "app.post('/login', function(req, res) {",
      "  const valid = Joi.validate(req.body, loginSchema).error === null;",
      "  if (!valid) {",
      "    res.status(422).json({",
      "      status: 'error'",
      "      message: 'Invalid request data'",
      "      data: req.body",
      "    });",
      "  } else {",
      "    // happy days - login user",
      "    res.send(`ok`);",
      "  }",
      "});"
    ],
    "description": "showcases the lib Joi and how you can use it to validate incoming requests"
  }
}
